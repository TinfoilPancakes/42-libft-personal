/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_vector_T.htf                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ppatil <ppatil@student.42.us.org>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/10/28 23:04:51 by ppatil            #+#    #+#             */
/*   Updated: 2016/10/28 23:04:51 by ppatil           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifdef T
# ifdef TNM

#  include "ft_memory.h"

#  define T_VEC_BUFF_SIZE 16

typedef	struct
{
	T		*data;
	T		*end;
	size_t	count;
	size_t	size;
} TNM(t_vec);

/*
**	Creates new vector in heap with default buffer size.
*/

static inline TNM(t_vec)	TNM(vec_new)(void)
{
	TNM(t_vec)	new_vec;

	new_vec.data = (T *)ft_memalloc(sizeof(T) * T_VEC_BUFF_SIZE);
	new_vec.end = new_vec.data;
	new_vec.size = T_VEC_BUFF_SIZE;
	new_vec.count = 0;
	return (new_vec);
}

/*
**	Creates new vector in heap with user defined buffer size.
*/

static inline TNM(t_vec)	TNM(vec_new_n)(size_t initial_size)
{
	TNM(t_vec)	new_vec;

	new_vec.data = (T *)ft_memalloc(sizeof(T) * initial_size);
	new_vec.end = new_vec.data;
	new_vec.size = initial_size;
	new_vec.count = 0;
	return (new_vec);
}

/*
**	Creates a copy of another vector.
*/

static inline TNM(t_vec)	TNM(vec_cpy)(TNM(t_vec) *old_vec)
{
	TNM(t_vec)	new_vec;

	new_vec.data = (T *)ft_memalloc(sizeof(T) * old_vec->size);
	ft_memcpy(new_vec.data, old_vec->data, old_vec->size * sizeof(T));
	new_vec.end = new_vec.data + old_vec->count;
	new_vec.size = old_vec->size;
	new_vec.count = old_vec->count;
	return (new_vec);
}

/*
**	Resizes Vector. Turns out adding size_t to pointer will
**	automatically deal witht he step size.
*/

static inline void		TNM(vec_resize)(TNM(t_vec) *v, size_t new_size)
{
	T	*new_buff;

	new_buff = (T *)ft_memalloc(sizeof(T) * new_size);
	if (new_size > v->count)
		ft_memcpy(new_buff, v->data, v->count * sizeof(T));
	else
	{
		ft_memcpy(new_buff, v->data, new_size * sizeof(T));
		v->count = new_size;
	}
	ft_memdel((void **)&(v->data));
	v->data = new_buff;
	v->size = new_size;
	v->end = new_buff + v->count;
}

/*
**	Adds element to end of vector.
*/

static inline void		TNM(vec_push)(TNM(t_vec) *v, T elem)
{
	if (v->count == v->size)
		TNM(vec_resize)(v, v->size * 2);
	*(v->end) = elem;
	v->end++;
	v->count++;
}

/*
**	Copies value of last element in vector to res.
**	Returns 0 if empty & 1 on success.
*/

static inline int			TNM(vec_peek)(TNM(t_vec) *v, T *res)
{
	if (v->end == v->data)
		return (0);
	*res = *(v->end - 1);
	return (1);
}

/*
**	Returns pointer last element in vector and decrements count.
**	Be careful as this is not garunteed to exist after resizing or further
**	additions.
**	Returns NULL on failure or empty vector.
*/

static inline T			*TNM(vec_pop)(TNM(t_vec) *v)
{
	if (v->end == v->data)
		return (NULL);
	v->end--;
	v->count--;
	return (v->end);
}

/*
**	Appends a string of values to vector, resizing if neccesary.
*/

static inline void		TNM(vec_append)(TNM(t_vec) *v, T *str, size_t n)
{
	if (v->count + n >= v->size)
		TNM(vec_resize)(v, v->count + n + 1);
	v->count += n;
	while (n)
	{
		*(v->end) = *str;
		v->end++;
		str++;
		n--;
	}
}

/*
**	Returns a pointer to object at given index.
*/

static inline T			*TNM(vec_at)(TNM(t_vec) *v, size_t index)
{
	return (v->data + index);
}

/*
**	Joins two vectors together in a new vector, returning new vector.
*/

static inline TNM(t_vec)	TNM(vec_join)(TNM(t_vec) *v1, TNM(t_vec) *v2)
{
	TNM(t_vec)	new_vec;

	new_vec = TNM(vec_new_n)(v1->count + v2->count);
	new_vec.count = v1->count + v2->count;
	ft_memcpy(new_vec.end, v1->data, v1->count);
	new_vec.end = new_vec.end + v1->count;
	ft_memcpy(new_vec.end, v2->data, v2->count);
	new_vec.end = new_vec.end + v2->count;
	return (new_vec);
}

/*
**	Cleans up messes. Do not attempt to use after deletion.
*/

static inline void		TNM(vec_del)(TNM(t_vec) *v)
{
	ft_memdel((void **)&(v->data));
	v->count = 0;
	v->size = 0;
	v->end = NULL;
}

/*
**	Harmless references to shut compiler up.
*/

#  undef T_VEC_BUFF_SIZE
#  undef TNM
# endif
# undef T
#endif
